# -*- coding: utf-8 -*-
"""trabalhodata.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1F1Y62jRnyl7gYeQNxyGbzCetdjBUf3C3
"""

!pip install dash
!pip install -U plotly

import pandas as pd
import plotly.express as px
from dash import Dash, html, dcc, Input, Output


df = pd.read_csv('diabetesdata.csv')

# Inicializando o app Dash
app = Dash(__name__)

# Layout do dashboard
app.layout = html.Div([
    html.H1("Dashboard de Análise de Diabetes", style={'textAlign': 'center'}),

    # Filtro para selecionar o valor de Outcome
    dcc.Dropdown(
        id='outcome-filter',
        options=[
            {'label': 'Todos', 'value': 'all'},
            {'label': 'Diabético (Resultado = 1)', 'value': 1},
            {'label': 'Não diabético (Resultado = 0)', 'value': 0}
        ],
        value='all',
        style={'width': '50%', 'margin': '10px auto'}
    ),

    # Filtro para selecionar intervalo de Idade
    dcc.RangeSlider(
        id='age-filter',
        min=df['Age'].min(),
        max=df['Age'].max(),
        step=1,
        marks={i: str(i) for i in range(df['Age'].min(), df['Age'].max()+1, 10)},
        value=[df['Age'].min(), df['Age'].max()],
        tooltip={"placement": "bottom", "always_visible": True}
    ),

    # Gráfico de dispersão entre Glicose e BMI
    dcc.Graph(id='scatter-plot'),

    # Gráfico de distribuição de Idade
    dcc.Graph(id='age-distribution'),

    # Gráfico de barras para a distribuição de Outcome
    dcc.Graph(id='outcome-distribution'),

    # Estatísticas descritivas
    html.Div(id='statistics', style={'marginTop': '20px'})
])

# Atualizar os gráficos com base nos filtros
@app.callback(
    [Output('scatter-plot', 'figure'),
     Output('age-distribution', 'figure'),
     Output('outcome-distribution', 'figure'),
     Output('statistics', 'children')],
    [Input('outcome-filter', 'value'),
     Input('age-filter', 'value')]
)
def update_graphs(outcome_filter, age_filter):
    # Filtrando os dados conforme a seleção do usuário
    if outcome_filter != 'all':
        filtered_df = df[df['Outcome'] == int(outcome_filter)]
    else:
        filtered_df = df

    # Filtrando por intervalo de idade
    filtered_df = filtered_df[(filtered_df['Age'] >= age_filter[0]) & (filtered_df['Age'] <= age_filter[1])]

    # Gráfico de dispersão entre Glucose e BMI
    scatter_fig = px.scatter(
        filtered_df, x='Glucose', y='BMI', color='Outcome',
        title="Relação entre Glicose e IMC",
        labels={"Glucose": "Nível de Glicose", "BMI": "Índice de Massa Corporal", "Outcome": "Resultado"},
        color_discrete_map={0: 'blue', 1: 'red'}
    )

    # Gráfico de distribuição da Idade
    age_dist_fig = px.histogram(
        filtered_df, x='Age', color='Outcome', nbins=10,
        title="Distribuição da Idade",
        labels={"Age": "Idade", "Outcome": "Resultado (0=Não, 1=Sim)"},
        color_discrete_map={0: 'blue', 1: 'red'}
    )

    # Gráfico de barras para a distribuição de Outcome
    outcome_counts = filtered_df['Outcome'].value_counts().reset_index()
    outcome_counts.columns = ['Resultado', 'Contagem']
    outcome_dist_fig = px.bar(
        outcome_counts, x='Resultado', y='Contagem',
        title="Distribuição de Resultado (Diabético vs Não diabético)",
        labels={"Resultado": "Resultado", "Contagem": "Frequência"}
    )

    # Estatísticas descritivas
    stats = filtered_df.describe().transpose()
    stats_html = [
        html.H3("Estatísticas Descritivas", style={'textAlign': 'center'}),
        html.Table(
            # Criando as colunas de estatísticas
            children=[
                html.Tr([html.Th("Variável"), html.Th("Média"), html.Th("Desvio Padrão")])  # Cabeçalho
            ] + [
                html.Tr([
                    html.Td(col),  # Nome da variável
                    html.Td(f"{stats.loc[col, 'mean']:.2f}"),  # Média
                    html.Td(f"{stats.loc[col, 'std']:.2f}")  # Desvio padrão
                ]) for col in stats.index
            ],
            style={'width': '80%', 'margin': '10px auto', 'borderCollapse': 'collapse', 'border': '1px solid black'}
        )
    ]

    return scatter_fig, age_dist_fig, outcome_dist_fig, stats_html

# Rodando o servidor
if __name__ == '__main__':
    app.run_server(debug=True)